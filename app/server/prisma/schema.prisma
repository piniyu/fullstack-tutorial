datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgrespassword@pg/prisma?schema=public"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @default(cuid()) @id
  email         String         @unique
  password      String
  posts         Post[]
  votes         PollVote[]
  judgments     PollJudgment[]
  postLikes     PostLike[]
  comments      Comment[]
  commentLikes  CommentLike[]
  follows       Follow[]
  commits       Commit[]
  commitReviews CommitReview[]
  profile       Profile
  dailyProfile  DailyProfile
  bets          Bet[]
  polls         Poll[]
  notices       Notice[]
}

model Profile {
  id               Int    @default(autoincrement()) @id
  user             User   @relation(fields: [userId], references: [id])
  userId           String
  lv               Int    @default(0)
  exp              Int    @default(0)
  nGotLikes        Int    @default(0)
  nCommits         Int    @default(0)
  nFollowedEvents  Int    @default(0)
  nFollowedTickers Int    @default(0)
}

model DailyProfile {
  id             Int      @default(autoincrement()) @id
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  nLikes         Int      @default(0)
  nFeeds         Int      @default(0)
  nEventFollows  Int      @default(0)
  nTickerFollows Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Post {
  id        Int        @default(autoincrement()) @id
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  cat       PostCat    @default(LINK)
  status    PostStatus @default(ACTIVE)
  title     String
  text      String
  count     PostCount
  commments Comment[]
  likes     PostLike[]
  symbols   Symbol[]   @relation(references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  commit    Commit?
  poll      Poll?
  parentId  Int?
  parent    Post?      @relation("ParentChildren", fields: [parentId], references: [id])
  children  Post[]     @relation("ParentChildren")
  notices   Notice[]
}

model PostLike {
  id        Int        @default(autoincrement()) @id
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  post      Post       @relation(fields: [postId], references: [id])
  postId    Int
  choice    LikeChoice
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId, postId])
}

model PostCount {
  id        Int      @default(autoincrement()) @id
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int      @unique
  nViews    Int      @default(0)
  nUps      Int      @default(0)
  nDowns    Int      @default(0)
  nComments Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notice {
  id        Int          @default(autoincrement()) @id
  cat       NoticeCat
  status    NoticeStatus @default(OPEN)
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  post      Post         @relation(fields: [postId], references: [id])
  postId    Int
  text      String?
  nPops     Int          @default(0)
  expiredAt DateTime
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Poll {
  id           Int            @default(autoincrement()) @id
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  post         Post           @relation(fields: [postId], references: [id])
  postId       Int            @unique
  status       PollStatus     @default(OPEN)
  choices      String[]
  start        DateTime
  end          DateTime
  nDays        Int
  minVotes     Int            @default(30)
  nDaysJudge   Int            @default(5)
  minJudgments Int            @default(5)
  votes        PollVote[]
  judgments    PollJudgment[]
  count        PollCount
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model PollVote {
  id        Int      @default(autoincrement()) @id
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  poll      Poll     @relation(fields: [pollId], references: [id])
  pollId    Int
  choice    Int
  reward    Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, pollId])
}

model PollJudgment {
  id        Int      @default(autoincrement()) @id
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  poll      Poll     @relation(fields: [pollId], references: [id])
  pollId    Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int      @unique
  choice    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, pollId])
}

model PollCount {
  id             Int       @default(autoincrement()) @id
  poll           Poll      @relation(fields: [pollId], references: [id])
  pollId         Int       @unique
  nVotes         Int[]
  nJudgments     Int[]
  judgeStartedAt DateTime?
  judgeEndedAt   DateTime?
  verdictValid   Boolean?
  verdictChoice  Int?
}

model Comment {
  id        Int           @default(autoincrement()) @id
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  post      Post          @relation(fields: [postId], references: [id])
  postId    Int
  status    PostStatus    @default(ACTIVE)
  content   String
  count     CommentCount
  likes     CommentLike[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  judgment  PollJudgment?
}

model CommentCount {
  id        Int      @default(autoincrement()) @id
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int      @unique
  // nViews    Int      @default(0)
  nUps      Int      @default(0)
  nDowns    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CommentLike {
  id        Int        @default(autoincrement()) @id
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment    @relation(fields: [commentId], references: [id])
  commentId Int
  choice    LikeChoice
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId, commentId])
}

model Symbol {
  id        Int          @default(autoincrement()) @id
  name      String       @unique
  cat       SymbolCat
  status    SymbolStatus @default(ACTIVE)
  body      String?
  sys       String?
  posts     Post[]       @relation(references: [id])
  commits   Commit[]
  ticks     Tick[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  follows   Follow[]
  bets      Bet[]
}

model Follow {
  id        Int      @default(autoincrement()) @id
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  symbol    Symbol   @relation(fields: [symbolId], references: [id])
  symbolId  Int
  followed  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, symbolId])
}

model Commit {
  id        Int            @default(autoincrement()) @id
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  symbol    Symbol         @relation(fields: [symbolId], references: [id])
  symbolId  Int
  post      Post           @relation(fields: [postId], references: [id])
  postId    Int
  status    CommitStatus   @default(REVIEW)
  action    CommitAction
  body      String
  // count     CommitCount
  reviews   CommitReview[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

// model CommitCount {
// id         Int      @default(autoincrement()) @id
// commit     Commit   @relation(fields: [commitId], references: [id])
// commitId   Int      @unique
// nAgrees    Int      @default(0)
// nDisagrees Int      @default(0)
// nHolds     Int      @default(0)
// createdAt  DateTime @default(now())
// updatedAt  DateTime @updatedAt
// }

model CommitReview {
  id        Int      @default(autoincrement()) @id
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  commit    Commit   @relation(fields: [commitId], references: [id])
  commitId  Int
  choice    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, commitId])
}

model Bet {
  id        Int      @default(autoincrement()) @id
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  symbol    Symbol   @relation(fields: [symbolId], references: [id])
  symbolId  Int
  body      String
  result    String?
  expiredAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tick {
  id       Int      @default(autoincrement()) @id
  symbol   Symbol   @relation(fields: [symbolId], references: [id])
  symbolId Int
  o        Float?
  h        Float?
  l        Float?
  c        Float?
  v        Int?
  at       DateTime
}

enum PostCat {
  IDEA
  ASK
  POLL
  LINK
  COMMIT
  REPLY
}

enum PostStatus {
  // 不能comment、edit,
  ACTIVE
  // 可以comment，不能edit
  LOCK
  DELETED
  REPORTED
  ARCHIVED
}

enum PollStatus {
  OPEN
  JUDGE
  CLOSE_SUCCESS
  CLOSE_FAIL
}

enum PollFailReason {
  // 沒達到最低票數要求
  MIN_VOTES
  MIN_JUDGMENTS
  // 沒有一個多數同意的共識
  MAJOR_VERDICT
  // 結果判定為無效
  VERDICT_AS_FAIL
  // 其他問題
  OTHER
}

enum NoticeCat {
  POLL_REVOTE
  POLL_START_JUDGE
  POLL_INVITE_JUDGE
  POLL_VERDICT
  SIGNAL
}

enum NoticeStatus {
  OPEN
  READ
}

enum SymbolCat {
  TAG
  TICKER
  EVENT
  SYS_TICKER_FOLLOWERS
}

enum SymbolStatus {
  ACTIVE
  REPORTED
  ARCHIVED
  DUPLICATED
}

enum CommitStatus {
  REVIEW
  PASS
  REJECT
}

enum CommitAction {
  CREATE
  UPDATE
  DELETE
  MERGE
}

enum LikeChoice {
  UP
  DOWN
  NEUTRAL
}
